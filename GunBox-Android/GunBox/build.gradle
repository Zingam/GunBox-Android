apply plugin: 'com.android.application'

android {
    compileSdkVersion Versions.compileSdk



    defaultConfig {
        applicationId "com.roccoormm.sdl2app"
        minSdkVersion Versions.minSdk
        targetSdkVersion Versions.targetSdk
        versionCode Versions.versionCode
        versionName Versions.versionName

        ndk {
            // Limiting to a smaller set of  ABIs to save time while testing:
            abiFilters = Deps.abiFilters
        }

        externalNativeBuild {
            cmake {
                // Passes optional arguments to CMake.
                arguments "-DANDROID_ARM_NEON=TRUE", // Build with NEON support
                        // External library sources root dir
                        "-D.ExternalLibrariesRootDir:STRING=${rootProject.ext.externalLibrariesDirectory}",
                        // Search paths for the external library binaries
                        "-D.LibraryArtifactsPath_FreeType2:STRING=${rootProject.ext.nativeLibraryArtifactsOutputDirectory}/${Deps.freetype2_ModuleName}",
                        "-D.LibraryArtifactsPath_SDL2:STRING=${rootProject.ext.nativeLibraryArtifactsOutputDirectory}/${Deps.sdl2_ModuleName}",
                        // Library type to link to
                        "-D.UseSharedLibrary_FreeType2:BOOL=${Deps.freetype2_BuildAsShared}",
                        // When linking a static SDL2 library to a shared
                        // library SDL_main gets stripped thus we compile all
                        // libraries as static and link them with:
                        //   $<$<PLATFORM_ID:Android>:-Wl,--whole-archive>
                        //   GunBox_Engine_main
                        //   $<$<PLATFORM_ID:Android>:-Wl,--no-whole-archive>
                        "-D.UseSharedLibrary_SDL2:BOOL=${Deps.sdl2_BuildAsShared}",
                        "-Doption_EngineLibraryAs_SHARED:BOOL=NO"
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    externalNativeBuild {
        cmake {
            // Tells Gradle to put outputs from external native
            // builds in the path specified below.
            buildStagingDirectory = "${rootProject.ext.nativeStagingDirectory}/${project.name}"

            // Tells Gradle to find the root CMake build script in the same
            // directory as the module's build.gradle file. Gradle requires this
            // build script to add your CMake project as a build dependency and
            // pull your native sources into your Android project.
            path "${rootProject.ext.appProjectDirectory}/CMakeLists.txt"
            version "3.12.0"
        }
    }

    // Specification of the copy tasks
    def export_apk_copySpec = copySpec {
        android.applicationVariants.all { variant ->
            variant.outputs.all { output ->
                from(output.outputFile.getParent()) {
                    include "*.apk"
                }
            }
        }
    }

    // Copy existing Android packages (*.apk)
    task copy_apk(type: Copy) {
        group "Export"
        with export_apk_copySpec
        into "${rootProject.ext.apkOutputDirectory}"
    }

    // Build all variants and export the generated Android packages (*.apk)
    task exportAll_apk(type: Copy, dependsOn: ['assemble']) {
        group "Export"
        with export_apk_copySpec
        into "${rootProject.ext.apkOutputDirectory}"
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    // External libraries - the libraries will be build and added to the .apk
    implementation project(":${Deps.freetype2_ModuleName}")
    implementation project(":${Deps.sdl2_ModuleName}")
}
